"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
const jwt = require("jsonwebtoken");
const jwt_constants_1 = require("./jwt.constants");
let JwtService = class JwtService {
    constructor(options) {
        this.options = options;
    }
    sign(payload, options) {
        const signOptions = options
            ? Object.assign({}, (this.options.signOptions || {}), options) : this.options.signOptions;
        return jwt.sign(payload, this.options.secretOrPrivateKey, signOptions);
    }
    signAsync(payload, options) {
        const signOptions = options
            ? Object.assign({}, (this.options.signOptions || {}), options) : this.options.signOptions;
        return new Promise((resolve, reject) => jwt.sign(payload, this.options.secretOrPrivateKey, signOptions, (err, encoded) => (err ? reject(err) : resolve(encoded))));
    }
    verify(token, options) {
        const verifyOptions = options
            ? Object.assign({}, (this.options.verifyOptions || {}), options) : this.options.verifyOptions;
        return jwt.verify(token, this.options.publicKey || this.options.secretOrPrivateKey, verifyOptions);
    }
    verifyAsync(token, options) {
        const verifyOptions = options
            ? Object.assign({}, (this.options.verifyOptions || {}), options) : this.options.verifyOptions;
        return new Promise((resolve, reject) => jwt.verify(token, this.options.publicKey || this.options.secretOrPrivateKey, verifyOptions, (err, decoded) => (err ? reject(err) : resolve(decoded))));
    }
    decode(token, options) {
        return jwt.decode(token, options);
    }
};
JwtService = __decorate([
    common_1.Injectable(),
    __param(0, common_1.Inject(jwt_constants_1.JWT_MODULE_OPTIONS)),
    __metadata("design:paramtypes", [Object])
], JwtService);
exports.JwtService = JwtService;
